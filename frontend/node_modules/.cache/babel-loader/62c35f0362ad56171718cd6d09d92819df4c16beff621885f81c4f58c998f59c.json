{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\laksh\\\\Downloads\\\\ffl\\\\smart-dynamic-pricing-fixed\\\\frontend\\\\src\\\\components\\\\CustomerSegmentPie.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomerSegmentPie = ({\n  data = []\n}) => {\n  // If no data is provided, use sample data\n  const segments = data.length > 0 ? data : [{\n    name: 'Price Sensitive',\n    percentage: 35,\n    color: '#FF6384'\n  }, {\n    name: 'Quality Focused',\n    percentage: 25,\n    color: '#36A2EB'\n  }, {\n    name: 'Brand Loyal',\n    percentage: 20,\n    color: '#FFCE56'\n  }, {\n    name: 'Convenience Seekers',\n    percentage: 15,\n    color: '#4BC0C0'\n  }, {\n    name: 'Luxury Buyers',\n    percentage: 5,\n    color: '#9966FF'\n  }];\n\n  // Calculate total for percentage validation\n  const total = segments.reduce((sum, segment) => sum + segment.percentage, 0);\n\n  // Normalize percentages if total is not 100\n  const normalizedSegments = segments.map(segment => ({\n    ...segment,\n    percentage: total !== 0 ? segment.percentage / total * 100 : 0\n  }));\n\n  // Prepare chart data\n  const chartData = {\n    labels: normalizedSegments.map(segment => segment.name),\n    datasets: [{\n      data: normalizedSegments.map(segment => segment.percentage),\n      backgroundColor: normalizedSegments.map(segment => segment.color || '#' + Math.floor(Math.random() * 16777215).toString(16)),\n      borderWidth: 1,\n      borderColor: '#ffffff'\n    }]\n  };\n\n  // In a real implementation, we would use Chart.js\n  // For this example, we'll create a simplified visual representation\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full relative overflow-hidden\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-gradient-to-r from-purple-50 to-pink-50 opacity-50 rounded-lg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative h-full flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 flex items-center justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative w-4/5 h-4/5\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 100 100\",\n            className: \"w-full h-full\",\n            children: normalizedSegments.map((segment, index) => {\n              // Calculate the segment's angle in the pie chart\n              const percentage = segment.percentage;\n              const angle = percentage / 100 * 360;\n\n              // Calculate starting angle based on previous segments\n              const startAngle = index > 0 ? normalizedSegments.slice(0, index).reduce((sum, s) => sum + s.percentage / 100 * 360, 0) : 0;\n              const endAngle = startAngle + angle;\n\n              // Convert angles to radians and calculate points\n              const startRad = (startAngle - 90) * (Math.PI / 180);\n              const endRad = (endAngle - 90) * (Math.PI / 180);\n              const x1 = 50 + 40 * Math.cos(startRad);\n              const y1 = 50 + 40 * Math.sin(startRad);\n              const x2 = 50 + 40 * Math.cos(endRad);\n              const y2 = 50 + 40 * Math.sin(endRad);\n              const largeArcFlag = angle > 180 ? 1 : 0;\n\n              // Create SVG path for the pie segment\n              const d = `M 50 50 L ${x1} ${y1} A 40 40 0 ${largeArcFlag} 1 ${x2} ${y2} Z`;\n              return /*#__PURE__*/_jsxDEV(\"path\", {\n                d: d,\n                fill: segment.color || '#' + Math.floor(Math.random() * 16777215).toString(16),\n                stroke: \"#fff\",\n                strokeWidth: \"1\",\n                className: \"transition-all duration-500 ease-out\",\n                style: {\n                  transformOrigin: 'center',\n                  animation: `fadeIn 1s ease-out forwards, scaleIn 1s ease-out forwards`\n                }\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-1/3 flex flex-col justify-center pr-4\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: normalizedSegments.map((segment, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-3 h-3 rounded-full mr-2\",\n              style: {\n                backgroundColor: segment.color || '#' + Math.floor(Math.random() * 16777215).toString(16)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex-1 min-w-0\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs font-medium truncate\",\n                children: segment.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-xs text-gray-500\",\n                children: [segment.percentage.toFixed(1), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n        @keyframes scaleIn {\n          from { transform: scale(0.8); }\n          to { transform: scale(1); }\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c = CustomerSegmentPie;\nexport default CustomerSegmentPie;\nvar _c;\n$RefreshReg$(_c, \"CustomerSegmentPie\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","CustomerSegmentPie","data","segments","length","name","percentage","color","total","reduce","sum","segment","normalizedSegments","map","chartData","labels","datasets","backgroundColor","Math","floor","random","toString","borderWidth","borderColor","className","children","fileName","_jsxFileName","lineNumber","columnNumber","viewBox","index","angle","startAngle","slice","s","endAngle","startRad","PI","endRad","x1","cos","y1","sin","x2","y2","largeArcFlag","d","fill","stroke","strokeWidth","style","transformOrigin","animation","toFixed","jsx","_c","$RefreshReg$"],"sources":["C:/Users/laksh/Downloads/ffl/smart-dynamic-pricing-fixed/frontend/src/components/CustomerSegmentPie.tsx"],"sourcesContent":["import React from 'react';\n\ntype CustomerSegmentPieProps = {\n  data?: any[];\n};\n\nconst CustomerSegmentPie: React.FC<CustomerSegmentPieProps> = ({ data = [] }) => {\n  // If no data is provided, use sample data\n  const segments = data.length > 0 ? data : [\n    { name: 'Price Sensitive', percentage: 35, color: '#FF6384' },\n    { name: 'Quality Focused', percentage: 25, color: '#36A2EB' },\n    { name: 'Brand Loyal', percentage: 20, color: '#FFCE56' },\n    { name: 'Convenience Seekers', percentage: 15, color: '#4BC0C0' },\n    { name: 'Luxury Buyers', percentage: 5, color: '#9966FF' }\n  ];\n\n  // Calculate total for percentage validation\n  const total = segments.reduce((sum, segment) => sum + segment.percentage, 0);\n  \n  // Normalize percentages if total is not 100\n  const normalizedSegments = segments.map(segment => ({\n    ...segment,\n    percentage: total !== 0 ? (segment.percentage / total) * 100 : 0\n  }));\n\n  // Prepare chart data\n  const chartData = {\n    labels: normalizedSegments.map(segment => segment.name),\n    datasets: [\n      {\n        data: normalizedSegments.map(segment => segment.percentage),\n        backgroundColor: normalizedSegments.map(segment => segment.color || '#' + Math.floor(Math.random()*16777215).toString(16)),\n        borderWidth: 1,\n        borderColor: '#ffffff'\n      }\n    ]\n  };\n\n  // In a real implementation, we would use Chart.js\n  // For this example, we'll create a simplified visual representation\n  return (\n    <div className=\"h-full relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-r from-purple-50 to-pink-50 opacity-50 rounded-lg\"></div>\n      <div className=\"relative h-full flex\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"relative w-4/5 h-4/5\">\n            <svg viewBox=\"0 0 100 100\" className=\"w-full h-full\">\n              {normalizedSegments.map((segment, index) => {\n                // Calculate the segment's angle in the pie chart\n                const percentage = segment.percentage;\n                const angle = (percentage / 100) * 360;\n                \n                // Calculate starting angle based on previous segments\n                const startAngle = index > 0 \n                  ? normalizedSegments.slice(0, index).reduce((sum, s) => sum + (s.percentage / 100) * 360, 0) \n                  : 0;\n                const endAngle = startAngle + angle;\n                \n                // Convert angles to radians and calculate points\n                const startRad = (startAngle - 90) * (Math.PI / 180);\n                const endRad = (endAngle - 90) * (Math.PI / 180);\n                \n                const x1 = 50 + 40 * Math.cos(startRad);\n                const y1 = 50 + 40 * Math.sin(startRad);\n                const x2 = 50 + 40 * Math.cos(endRad);\n                const y2 = 50 + 40 * Math.sin(endRad);\n                \n                const largeArcFlag = angle > 180 ? 1 : 0;\n                \n                // Create SVG path for the pie segment\n                const d = `M 50 50 L ${x1} ${y1} A 40 40 0 ${largeArcFlag} 1 ${x2} ${y2} Z`;\n                \n                return (\n                  <path\n                    key={index}\n                    d={d}\n                    fill={segment.color || '#' + Math.floor(Math.random()*16777215).toString(16)}\n                    stroke=\"#fff\"\n                    strokeWidth=\"1\"\n                    className=\"transition-all duration-500 ease-out\"\n                    style={{\n                      transformOrigin: 'center',\n                      animation: `fadeIn 1s ease-out forwards, scaleIn 1s ease-out forwards`\n                    }}\n                  />\n                );\n              })}\n            </svg>\n          </div>\n        </div>\n        \n        <div className=\"w-1/3 flex flex-col justify-center pr-4\">\n          <div className=\"space-y-2\">\n            {normalizedSegments.map((segment, index) => (\n              <div key={index} className=\"flex items-center\">\n                <div\n                  className=\"w-3 h-3 rounded-full mr-2\"\n                  style={{ backgroundColor: segment.color || '#' + Math.floor(Math.random()*16777215).toString(16) }}\n                ></div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-xs font-medium truncate\">{segment.name}</div>\n                  <div className=\"text-xs text-gray-500\">{segment.percentage.toFixed(1)}%</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n      <style jsx>{`\n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n        @keyframes scaleIn {\n          from { transform: scale(0.8); }\n          to { transform: scale(1); }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default CustomerSegmentPie;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}