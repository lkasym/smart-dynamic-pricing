{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst apiClient = {\n  // Products\n  getProducts: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/products`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  },\n  // Customer Segments\n  getCustomerSegments: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/customer_segments`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching customer segments:', error);\n      throw error;\n    }\n  },\n  // Generate Sample Data\n  generateSampleData: async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/generate_sample_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error generating sample data:', error);\n      throw error;\n    }\n  },\n  // Training Status\n  getTrainingStatus: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/training_status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching training status:', error);\n      throw error;\n    }\n  },\n  // Training Results\n  getTrainingResults: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/training_results`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching training results:', error);\n      throw error;\n    }\n  },\n  // Start Training\n  startTraining: async params => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/start_training`, params);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting training:', error);\n      throw error;\n    }\n  },\n  // Baseline Comparison\n  getBaselineComparison: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/baseline_comparison`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching baseline comparison:', error);\n      throw error;\n    }\n  },\n  // Price Demand Data\n  getPriceDemandData: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/price_demand_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching price demand data:', error);\n      throw error;\n    }\n  },\n  // Time Pricing Data\n  getTimePricingData: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/time_pricing_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching time pricing data:', error);\n      throw error;\n    }\n  },\n  // Customer Segment Data\n  getCustomerSegmentData: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/customer_segment_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching customer segment data:', error);\n      throw error;\n    }\n  }\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","getProducts","response","get","data","error","console","getCustomerSegments","generateSampleData","post","getTrainingStatus","getTrainingResults","startTraining","params","getBaselineComparison","getPriceDemandData","getTimePricingData","getCustomerSegmentData"],"sources":["C:/Users/laksh/Downloads/ffl/smart-dynamic-pricing-fixed/frontend/src/api/apiClient.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nconst apiClient = {\n  // Products\n  getProducts: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/products`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      throw error;\n    }\n  },\n\n  // Customer Segments\n  getCustomerSegments: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/customer_segments`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching customer segments:', error);\n      throw error;\n    }\n  },\n\n  // Generate Sample Data\n  generateSampleData: async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/generate_sample_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error generating sample data:', error);\n      throw error;\n    }\n  },\n\n  // Training Status\n  getTrainingStatus: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/training_status`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching training status:', error);\n      throw error;\n    }\n  },\n\n  // Training Results\n  getTrainingResults: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/training_results`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching training results:', error);\n      throw error;\n    }\n  },\n\n  // Start Training\n  startTraining: async (params: { episodes: number; useBaseline: boolean; baselineStrategy: string }) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/start_training`, params);\n      return response.data;\n    } catch (error) {\n      console.error('Error starting training:', error);\n      throw error;\n    }\n  },\n\n  // Baseline Comparison\n  getBaselineComparison: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/baseline_comparison`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching baseline comparison:', error);\n      throw error;\n    }\n  },\n\n  // Price Demand Data\n  getPriceDemandData: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/price_demand_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching price demand data:', error);\n      throw error;\n    }\n  },\n\n  // Time Pricing Data\n  getTimePricingData: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/time_pricing_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching time pricing data:', error);\n      throw error;\n    }\n  },\n\n  // Customer Segment Data\n  getCustomerSegmentData: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/customer_segment_data`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching customer segment data:', error);\n      throw error;\n    }\n  }\n};\n\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}