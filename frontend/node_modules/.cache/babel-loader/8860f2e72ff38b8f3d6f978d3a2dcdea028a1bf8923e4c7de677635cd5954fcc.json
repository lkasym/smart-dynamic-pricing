{"ast":null,"code":"// src/api/apiClient.ts\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 1) Create a shared axios instance\nconst http = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 2) Centralized error handling\nhttp.interceptors.response.use(res => res, err => {\n  var _err$config, _err$response;\n  console.error('[API ERROR]', (_err$config = err.config) === null || _err$config === void 0 ? void 0 : _err$config.url, (_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status, err.message);\n  // You can show a toast here, or propagate a custom error type\n  return Promise.reject(err);\n});\nconst apiClient = {\n  // Products\n  getProducts: () => http.get('/products').then(r => r.data),\n  // Customer segments (raw)\n  getCustomerSegments: () => http.get('/customer_segments').then(r => r.data),\n  // Customer segment data for charts\n  getCustomerSegmentData: () => http.get('/customer_segment_data').then(r => r.data),\n  // Price–Demand–Revenue curves\n  getPriceDemandData: () => http.get('/price_demand_data').then(r => r.data),\n  // Time‑based pricing multipliers\n  getTimePricingData: () => http.get('/time_pricing_data').then(r => r.data),\n  // Generate a fresh random sample\n  generateSampleData: () => http.post('/generate_sample_data').then(r => r.data),\n  // === Training ===\n  getTrainingStatus: () => http.get('/training_status').then(r => r.data),\n  getTrainingResults: () => http.get('/training_results').then(r => r.data),\n  getBaselineComparison: () => http.get('/baseline_comparison').then(r => r.data),\n  startTraining: opts => http.post('/start_training', opts).then(r => r.data)\n};\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","http","create","baseURL","timeout","headers","interceptors","response","use","res","err","_err$config","_err$response","console","error","config","url","status","message","Promise","reject","apiClient","getProducts","get","then","r","data","getCustomerSegments","getCustomerSegmentData","getPriceDemandData","getTimePricingData","generateSampleData","post","getTrainingStatus","getTrainingResults","getBaselineComparison","startTraining","opts"],"sources":["C:/Users/laksh/Downloads/ffl/smart-dynamic-pricing-fixed/frontend/src/api/apiClient.ts"],"sourcesContent":["// src/api/apiClient.ts\nimport axios, { AxiosInstance, AxiosError } from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// 1) Create a shared axios instance\nconst http: AxiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10_000,  \n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 2) Centralized error handling\nhttp.interceptors.response.use(\n  res => res,\n  (err: AxiosError) => {\n    console.error('[API ERROR]', err.config?.url, err.response?.status, err.message);\n    // You can show a toast here, or propagate a custom error type\n    return Promise.reject(err);\n  }\n);\n\nconst apiClient = {\n  // Products\n  getProducts: () => http.get('/products').then(r => r.data),\n\n  // Customer segments (raw)\n  getCustomerSegments: () => http.get('/customer_segments').then(r => r.data),\n\n  // Customer segment data for charts\n  getCustomerSegmentData: () => http.get('/customer_segment_data').then(r => r.data),\n\n  // Price–Demand–Revenue curves\n  getPriceDemandData: () => http.get('/price_demand_data').then(r => r.data),\n\n  // Time‑based pricing multipliers\n  getTimePricingData: () => http.get('/time_pricing_data').then(r => r.data),\n\n  // Generate a fresh random sample\n  generateSampleData: () => http.post('/generate_sample_data').then(r => r.data),\n\n  // === Training ===\n  getTrainingStatus: () => http.get('/training_status').then(r => r.data),\n  getTrainingResults: () => http.get('/training_results').then(r => r.data),\n  getBaselineComparison: () => http.get('/baseline_comparison').then(r => r.data),\n\n  startTraining: (opts: {\n    episodes: number;\n    useBaseline: boolean;\n    baselineStrategy: string;\n  }) => http.post('/start_training', opts).then(r => r.data),\n};\n\nexport default apiClient;\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAqC,OAAO;AAExD,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,IAAmB,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvCC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE,KAAM;EACfC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAJ,IAAI,CAACK,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC5BC,GAAG,IAAIA,GAAG,EACTC,GAAe,IAAK;EAAA,IAAAC,WAAA,EAAAC,aAAA;EACnBC,OAAO,CAACC,KAAK,CAAC,aAAa,GAAAH,WAAA,GAAED,GAAG,CAACK,MAAM,cAAAJ,WAAA,uBAAVA,WAAA,CAAYK,GAAG,GAAAJ,aAAA,GAAEF,GAAG,CAACH,QAAQ,cAAAK,aAAA,uBAAZA,aAAA,CAAcK,MAAM,EAAEP,GAAG,CAACQ,OAAO,CAAC;EAChF;EACA,OAAOC,OAAO,CAACC,MAAM,CAACV,GAAG,CAAC;AAC5B,CACF,CAAC;AAED,MAAMW,SAAS,GAAG;EAChB;EACAC,WAAW,EAAEA,CAAA,KAAMrB,IAAI,CAACsB,GAAG,CAAC,WAAW,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAE1D;EACAC,mBAAmB,EAAEA,CAAA,KAAM1B,IAAI,CAACsB,GAAG,CAAC,oBAAoB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAE3E;EACAE,sBAAsB,EAAEA,CAAA,KAAM3B,IAAI,CAACsB,GAAG,CAAC,wBAAwB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAElF;EACAG,kBAAkB,EAAEA,CAAA,KAAM5B,IAAI,CAACsB,GAAG,CAAC,oBAAoB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAE1E;EACAI,kBAAkB,EAAEA,CAAA,KAAM7B,IAAI,CAACsB,GAAG,CAAC,oBAAoB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAE1E;EACAK,kBAAkB,EAAEA,CAAA,KAAM9B,IAAI,CAAC+B,IAAI,CAAC,uBAAuB,CAAC,CAACR,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAE9E;EACAO,iBAAiB,EAAEA,CAAA,KAAMhC,IAAI,CAACsB,GAAG,CAAC,kBAAkB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EACvEQ,kBAAkB,EAAEA,CAAA,KAAMjC,IAAI,CAACsB,GAAG,CAAC,mBAAmB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EACzES,qBAAqB,EAAEA,CAAA,KAAMlC,IAAI,CAACsB,GAAG,CAAC,sBAAsB,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC;EAE/EU,aAAa,EAAGC,IAIf,IAAKpC,IAAI,CAAC+B,IAAI,CAAC,iBAAiB,EAAEK,IAAI,CAAC,CAACb,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI;AAC3D,CAAC;AAED,eAAeL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}